name: Conflux Builder

on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: "The commit hash of conflux-rust to build"
        required: true
      version_tag:
        description: "The version tag corresponding to the commit (e.g., v3.0.0)"
        required: true
      os:
        description: "Operating System"
        required: true
        type: choice
        options:
          - linux
          - windows
          - macos
      arch:
        description: "CPU Architecture"
        required: true
        type: choice
        options:
          - x86_64
          - aarch64
      glibc_version:
        description: "Glibc version (for Linux)"
        required: false
        default: "2.31"

jobs:
  check:
    runs-on: ubuntu-24.04
    outputs:
      should_build: ${{ steps.check_params.outputs.should_build }}
      config: ${{ steps.check_params.outputs.config }}
    steps:
      - id: check_params
        run: |
          CONFIGS='[
            {"os": "linux",   "arch": "x86_64",  "runs-on": "ubuntu-24.04"},
            {"os": "linux",   "arch": "aarch64", "runs-on": "ubuntu-24.04"},
            {"os": "macos",   "arch": "x86_64",  "runs-on": "macos-13"},
            {"os": "macos",   "arch": "aarch64", "runs-on": "macos-14"},
            {"os": "windows", "arch": "x86_64",  "runs-on": "windows-2022"}
          ]'
          MATCHING_CONFIG=$(echo "$CONFIGS" | jq -c ".[] | select(.os == \"${{ inputs.os }}\" and .arch == \"${{ inputs.arch }}\")")

          if [ -n "$MATCHING_CONFIG" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "config=$MATCHING_CONFIG" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check
    if: needs.check.outputs.should_build == 'true'
    strategy:
      matrix:
        config: ${{ fromJson(needs.check.outputs.config) }}
    runs-on: ${{ matrix.config.runs-on }}
    steps:
      - name: Checkout conflux-rust
        uses: actions/checkout@v4
        with:
          repository: "Conflux-Chain/conflux-rust"
          ref: ${{ inputs.commit_hash }}

      - name: Print Build Environment
        run: |
          echo "Commit Hash: ${{ inputs.commit_hash }}"
          echo "OS: ${{ matrix.config.os }}"
          echo "Architecture: ${{ matrix.config.arch }}"
          echo "Glibc Version: ${{ inputs.glibc_version }}"
          echo "Runner: ${{ matrix.config.runs-on }}"

      - name: Build Docker Image (Linux)
        if: matrix.config.os == 'linux'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.config.arch }}/glibc${{ inputs.glibc_version }}.dockerfile
          tags: conflux-builder:latest
          load: true

      - name: Run Build Script in Docker (Linux)
        if: matrix.config.os == 'linux'
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e COMMIT_HASH="${{ inputs.commit_hash }}" \
            -e OS="${{ matrix.config.os }}" \
            -e ARCH="${{ matrix.config.arch }}" \
            -e GLIBC_VERSION="${{ inputs.glibc_version }}" \
            -e VERSION_TAG="${{ inputs.version_tag }}" \
            conflux-builder:latest \
            bash -c "chmod +x ./scripts/build.sh && ./scripts/build.sh"

      - name: Run Build Script (Non-Linux)
        if: matrix.config.os != 'linux'
        shell: bash
        run: |
          chmod +x ./scripts/build.sh
          ./scripts/build.sh
        env:
          COMMIT_HASH: ${{ inputs.commit_hash }}
          OS: ${{ matrix.config.os }}
          ARCH: ${{ matrix.config.arch }}
          GLIBC_VERSION: ${{ inputs.glibc_version }}
          VERSION_TAG: ${{ inputs.version_tag }}

      - name: Get Archive Name
        id: get_archive_name
        run: |
          if [ "${{ matrix.config.os }}" == "windows" ]; then
            PLATFORM="pc-windows-msvc"
            ARCHIVE_EXT="zip"
          else
            if [ "${{ matrix.config.os }}" == "macos" ]; then
              PLATFORM="apple-darwin"
            else
              PLATFORM="unknown-linux-gnu-glibc${{ inputs.glibc_version }}"
            fi
            ARCHIVE_EXT="tar.gz"
          fi
          VERSION_TAG_CLEANED=$(echo "${{ inputs.version_tag }}" | sed 's/^v//')
          ARCHIVE_NAME="conflux-v${VERSION_TAG_CLEANED}-${{ matrix.config.arch }}-${PLATFORM}.${ARCHIVE_EXT}"
          SHORT_HASH=$(echo "${{ inputs.commit_hash }}" | cut -c1-7)
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          echo "short_hash=${SHORT_HASH}" >> $GITHUB_OUTPUT

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version_tag }}-${{ steps.get_archive_name.outputs.short_hash }}
          name: Release ${{ inputs.version_tag }} (commit ${{ inputs.commit_hash }})
          files: target/release/${{ steps.get_archive_name.outputs.archive_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
