name: "Linux Build Action"
description: "Build Conflux for Linux platform"

inputs:
  commit_hash:
    description: "The commit hash of conflux-rust to build"
    required: true
  version_tag:
    description: "The version tag for the release"
    required: true
  arch:
    description: "CPU Architecture"
    required: true
  glibc_version:
    description: "Glibc version"
    required: true
  openssl_version:
    description: "OpenSSL version choice"
    required: true
  static_openssl:
    description: "Whether to statically link OpenSSL"
    required: true

outputs:
  archive_name:
    description: "Name of the created archive"
    value: ${{ steps.package.outputs.archive_name }}
  archive_path:
    description: "Path to the created archive"
    value: ${{ steps.package.outputs.archive_path }}

runs:
  using: "composite"
  steps:
    - name: Map Glibc to Ubuntu Version
      id: ubuntu_version
      shell: bash
      run: |
        case "${{ inputs.glibc_version }}" in
          "2.27")
            echo "ubuntu_version=18.04" >> $GITHUB_OUTPUT
            echo "ubuntu_codename=bionic" >> $GITHUB_OUTPUT
            ;;
          "2.31")
            echo "ubuntu_version=20.04" >> $GITHUB_OUTPUT
            echo "ubuntu_codename=focal" >> $GITHUB_OUTPUT
            ;;
          "2.35")
            echo "ubuntu_version=22.04" >> $GITHUB_OUTPUT
            echo "ubuntu_codename=jammy" >> $GITHUB_OUTPUT
            ;;
          "2.39")
            echo "ubuntu_version=24.04" >> $GITHUB_OUTPUT
            echo "ubuntu_codename=noble" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "Error: Unsupported glibc version: ${{ inputs.glibc_version }}"
            exit 1
            ;;
        esac
    - name: Set Build Configuration
      id: build_config
      shell: bash
      run: |
        case "${{ inputs.arch }}" in
          "aarch64")
            echo "target=aarch64-unknown-linux-gnu" >> $GITHUB_OUTPUT
            echo "build_path=target/aarch64-unknown-linux-gnu/release" >> $GITHUB_OUTPUT
            ;;
          "x86_64")
            echo "target=x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
            echo "build_path=target/x86_64-unknown-linux-gnu/release" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "Error: Unsupported architecture: ${{ inputs.arch }}"
            exit 1
            ;;
        esac

    - name: Build Args
      id: build_args
      shell: bash
      run: |
        OPENSSL_ENV_FLAG=""
        if [[ "${{ inputs.static_openssl }}" == "true" ]]; then
          echo "OpenSSL static linking ENABLED"
          OPENSSL_ENV_FLAG="-e OPENSSL_STATIC=yes"
        else
          echo "OpenSSL dynamic linking ENABLED"
        fi

        echo "openssl_env_flag=${OPENSSL_ENV_FLAG}" >> $GITHUB_OUTPUT
    - name: Build Docker Image
      shell: bash
      run: |
        echo "--- Building Docker Image ---"
        docker build \
          --build-arg UBUNTU_VERSION="${{ steps.ubuntu_version.outputs.ubuntu_version }}" \
          --build-arg UBUNTU_CODENAME="${{ steps.ubuntu_version.outputs.ubuntu_codename }}" \
          --build-arg OPENSSL_CHOICE="${{ inputs.openssl_version }}" \
          -t "conflux-builder:${{ inputs.version_tag }}" \
          -f "docker/${{ inputs.arch }}.Dockerfile" .

    - name: Build in Docker Container
      shell: bash
      run: |
        echo "--- Running Build in Docker Container ---"
        docker run --rm \
          -v "${{ github.workspace }}/conflux-rust:/workspace" \
          -w /workspace \
          -e "ARCH=${{ inputs.arch }}" \
          ${{ steps.build_args.outputs.openssl_env_flag }} \
          "conflux-builder:${{ inputs.version_tag }}" \
          bash -c "cargo build --release --target ${{ steps.build_config.outputs.target }}"

    - name: Package Linux Artifact
      id: package
      shell: bash
      run: |
        echo "--- Packaging Linux Artifact ---"
        cd conflux-rust

        VERSION_TAG_CLEANED="${{ inputs.version_tag }}"
        VERSION_TAG_CLEANED="${VERSION_TAG_CLEANED#v}"

        TARGET="${{ steps.build_config.outputs.target }}"
        BUILD_PATH="${{ steps.build_config.outputs.build_path }}"

        PLATFORM="${TARGET}-glibc${{ inputs.glibc_version }}"

        ARTIFACT_SUFFIX=""
        if [[ "${{ inputs.static_openssl }}" == "true" ]]; then
          ARTIFACT_SUFFIX="${ARTIFACT_SUFFIX}-static"
        fi
        if [[ "${{ inputs.compatibility_mode }}" == "true" ]]; then
          ARTIFACT_SUFFIX="${ARTIFACT_SUFFIX}-compat"
        fi

        ARTIFACT_NAME="conflux-v${VERSION_TAG_CLEANED}-${{ inputs.arch }}-${PLATFORM}${ARTIFACT_SUFFIX}"
        ARCHIVE_NAME="${ARTIFACT_NAME}.tar.gz"
        ARTIFACT_DIR="${BUILD_PATH}/${ARTIFACT_NAME}"
 
        mkdir -p "${ARTIFACT_DIR}"
        mv "${BUILD_PATH}/conflux" "${ARTIFACT_DIR}/"
 
        # Create archive
        cd "$(dirname "${BUILD_PATH}")"
        tar -czvf "${ARCHIVE_NAME}" -C "$(basename "${BUILD_PATH}")" "${ARTIFACT_NAME}"
 
        # Output results
        echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
        echo "archive_path=conflux-rust/target/${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
        echo "Created archive: ${ARCHIVE_NAME}"