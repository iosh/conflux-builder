name: "Windows Build Action"
description: "Build Conflux for Windows platform"

inputs:
  commit_sha:
    description: "The commit hash of conflux-rust to build"
    required: true
  version_tag:
    description: "The version tag for the release"
    required: true
  arch:
    description: "CPU Architecture"
    required: true
  static_openssl:
    description: "Whether to statically link OpenSSL"
    required: true
  compatibility_mode:
    description: "Whether to enable compatibility mode"
    required: true

outputs:
  build_path:
    description: "Path to the build artifacts"
    value: ${{ steps.package.outputs.build_path }}

runs:
  using: "composite"
  steps:
    - name: Set Vcpkg Triplet based on Arch
      id: vcpkg_triplet
      shell: bash
      run: |
        if [[ "${{ inputs.arch }}" == "x86_64" ]]; then
          echo "VCPKG_TRIPLET=x64-windows" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.arch }}" == "aarch64" ]]; then
          echo "VCPKG_TRIPLET=arm64-windows" >> $GITHUB_OUTPUT
        else
          # The architecture has not been tested, so it is currently not supported.
          echo "::error::Unsupported architecture: ${{ inputs.arch }}"
          exit 1
        fi

    - name: Install common dependencies
      shell: bash
      run: |
        # conflux-rust need cmake 3(windows-2022 already install cmake3)
        # choco install cmake.install --version=3.31.8
        choco install llvm -y

    - name: Install static OpenSSL
      if: inputs.static_openssl == 'true'
      shell: bash
      run: |
        echo "Installing OpenSSL for static linking (triplet: ${{ vcpkg_triplet.outputs.VCPKG_TRIPLET }}-static-md)..."
        vcpkg install openssl:${{ vcpkg_triplet.outputs.VCPKG_TRIPLET }}-static-md

    - name: Install dynamic OpenSSL
      if: inputs.static_openssl == 'false'
      shell: bash
      run: |
        echo "Installing OpenSSL for dynamic linking (triplet: ${{ vcpkg_triplet.outputs.VCPKG_TRIPLET }})..."
        vcpkg install openssl:${{ vcpkg_triplet.outputs.VCPKG_TRIPLET }}

    - name: Install Rust toolchain
      shell: bash
      working-directory: conflux-rust
      run: |
        rustup show
        rustup target add ${{ inputs.arch }}-pc-windows-msvc
        rustup component add rustfmt rust-src

    - name: Set Build Arguments and Environment
      id: build_args
      shell: bash
      run: |

        # By default Windows don't need the "rocksdb/portable" feature because it is enabled by default
        # So we add this feature like other platforms
        CARGO_FEATURES_FLAG="--features \"rocksdb/portable\""

        if [[ "${{ inputs.compatibility_mode }}" == "true" ]]; then
          echo "Compatibility mode ENABLED"
          # The blst-portable feature is added for compatibility this will be disable assembly optimizations
          
          CARGO_FEATURES_FLAG="--features \"rocksdb/portable,blst-portable\""

        else
          echo "Compatibility mode DISABLED"
        fi

        if [[ "${{ inputs.static_openssl }}" == 'true' ]]; then
          echo "Setting environment for STATIC linking."
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "VCPKG_TARGET_TRIPLET=${{ vcpkg_triplet.outputs.VCPKG_TRIPLET }}-static-md" >> $GITHUB_ENV
        else
          echo "Setting environment for DYNAMIC linking."
          echo "VCPKGRS_DYNAMIC=1" >> $GITHUB_ENV
          echo "VCPKG_TARGET_TRIPLET=${{ vcpkg_triplet.outputs.VCPKG_TRIPLET }}" >> $GITHUB_ENV
        fi

        echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
        echo "cargo_features_flag=${CARGO_FEATURES_FLAG}" >> $GITHUB_OUTPUT
    - name: Build Project
      shell: bash
      working-directory: conflux-rust
      run: |
        echo "--- Building Conflux for Windows ---"
        RUSTFLAGS="-C target-cpu=haswell" cargo build --release --target=${{ inputs.arch }}-pc-windows-msvc ${{ steps.build_args.outputs.cargo_features_flag }}

    - name: Copy OpenSSL DLLs (for dynamic link)
      if: inputs.static_openssl == 'false'
      shell: bash
      run: |
        echo "Copying OpenSSL DLLs..."
        DLL_SOURCE_PATH="$VCPKG_INSTALLATION_ROOT/installed/${{ vcpkg_triplet.outputs.VCPKG_TRIPLET }}/bin"
        BUILD_TARGET_PATH="conflux-rust/target/${{ inputs.arch }}-pc-windows-msvc/release"

        echo "Searching for DLLs in: $DLL_SOURCE_PATH"
        echo "Copying to: $BUILD_TARGET_PATH"

        cp "$DLL_SOURCE_PATH"/*.dll "$BUILD_TARGET_PATH"/

        echo "DLLs copied successfully."

    - name: Set build path output
      id: package
      shell: bash
      run: |
        BUILD_PATH="target/${{ inputs.arch }}-pc-windows-msvc/release"
        echo "build_path=$BUILD_PATH" >> $GITHUB_OUTPUT
